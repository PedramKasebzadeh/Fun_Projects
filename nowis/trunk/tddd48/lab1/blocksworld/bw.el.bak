(define (domain blocks_world)
  (:requirements :strips)
  (:predicates 
    (on-table ?x) 
    (on ?x ?y) 
    (clear ?x)
    (clear_left ?x) ;; no blocks on the immediate left of ?x
    (clear_right ?y) ;; no blocks ont the immediate right of ?y
    (left ?x ?y) ;; ?x is on the left to ?y
    (leftcrane2 ?x)
    (rightcrane1 ?x)
  )



  ;; move ?x with left crane from ?y to the left of ?z (on the table)
  (:action LeftCrane_MoveToTable_left
    :parameters (?x ?y)
    :precondition (and (clear ?x) (on ?x ?y) (clear_left ?z)
                       (leftcrane2 ?x)
                  )
    :effect (and (clear ?y) (on-table ?x) (not (on ?x ?y)) (not (clear-left ?z))
                 (forall (?a) ((when (left ?a ?z) (and (left ?a ?x)
                                                       (leftcrane2 ?a)
                                                  )
                               )
                               (when (not (left ?a ?z)) (and (not (left ?a ?x))
                                                          (not (leftcrane2 ?a))
                                                        )
                               )
                              )
                 )
            )
  )

  (:action MoveToBlock1
    :parameters (?x ?y ?z)
    :precondition (and (clear ?x) (clear ?z) (on ?x ?y))
    :effect (and (clear ?y) (on ?x ?z) (not (clear ?z)) (not (on ?x ?y)))
  )

  (:action MoveToBlock2
    :parameters (?x ?y)
    :precondition (and (clear ?x) (clear ?y) (on-table ?x))
    :effect (and (on ?x ?y) (not (clear ?y)) (not (on-table ?x)))
  )
)

